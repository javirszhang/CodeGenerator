 #set($oraValue=".Value")
 #set($refsuo=".Entities;")
 #set($quotapos=0)
 #if($Const.namespace.lastindexof(".")<0)
     #set($quotapos=$Const.namespace.length)
 #else
	 #set($quotapos=$Const.namespace.lastindexof("."))
 #end
 /***************************************************
 *
 * Data Access Layer Of Winner Framework
#set($c=".generate.cs")
 * FileName : $Utils.ToPascalCase($Table.name)${c}
 * CreateTime : ${Const.CurrentTime}
 * CodeGenerateVersion : ${Const.Version}
 * TemplateVersion: 2.0.0
 * E_Mail : zhj.pavel@gmail.com
 * Blog : 
 * Copyright (C) YXH
 * 
 ***************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Winner.Framework.Core.DataAccess.Oracle;
using $Const.Namespace.substring(0,$quotapos)${refsuo}
#set($util=false)
#foreach($col in $Table.Columns)
#if(!$util && $col.IsNullable && ($col.DbType.ToUpper()=="NUMBER"||$col.DbType.ToUpper()=="DECIMAL"||$col.DbType.ToUpper()=="INTEGER"||$col.DbType.ToUpper()=="FLOAT"||$col.DbType.ToUpper()=="REAL"||$col.DbType.ToUpper()=="DATE"))
using Winner.Framework.Utils;
#set($util=true)
#end
#end
#set($classname=$Utils.ToPascalCase($Table.name))

namespace ${Const.namespace}
{
	/// <summary>
	/// ${Table.Comment}
	/// </summary>
	public partial class ${classname} : DataAccessBase
	{
		#region 构造和基本
		public ${classname}():base()
		{}
		public ${classname}(DataRow dataRow):base(dataRow)
		{}
#foreach($col in $Table.Columns)
		public const string _${col.Name.ToUpper()} = "${col.Name.ToUpper()}";
#end
		public const string _TableName = "${Table.Name.ToUpper()}";
		protected override DataRow BuildRow()
		{
			DataTable table = new DataTable("${Table.name.ToUpper()}");
#foreach($col in $Table.Columns)
			table.Columns.Add(_${col.Name.ToUpper()},typeof(${col.PrimativeTypeName.replace("?","")})).DefaultValue=$Utils.SolveDefaultValue($col.DefaultValue.ToString(),$col.Csharptype,$col.IsNullable);
#end
			return table.NewRow();
		}
		#endregion
		
		#region 属性
		protected override string TableName
		{
			get{return _TableName;}
		}
#foreach($col in $Table.Columns)
		/// <summary>
		/// $Utils.Inline($col.Comment)(#if($col.IsNullable)可空#else必填#end)
		/// <para>
		/// defaultValue: $Utils.SolveDefaultValue($col.DefaultValue.ToString(),$col.Csharptype,$col.IsNullable);   Length: ${col.Length}Byte
		/// </para>
		/// </summary>
		public ${col.primativetypename} $Utils.ToPascalCase($col.Name)
		{
#if($col.Csharptype.Name=="String")
			get{ return DataRow[_${col.Name.ToUpper()}].ToString();}
#elseif($col.Csharptype.Name=="Object")
			get{ return DataRow[_${col.Name.ToUpper()}];}
#else
#if($col.IsNullable)
			get{ return Helper.To${col.Csharptype.Name}(DataRow[_${col.Name.ToUpper()}]);}
#else
			get{ return Convert.To${col.Csharptype.Name}(DataRow[_${col.Name.ToUpper()}]);}
#end
#end
#if($col.Name.ToUpper()!="CREATETIME")
			#if($col.Comment.Indexof("AUTOINCREASE")>-1)protected#end set{setProperty(_${col.Name.ToUpper()}, value);}
#end			
		}
#end
		#endregion
		
		#region 基本方法
		protected bool SelectByCondition(string condition)
		{
			string sql = "SELECT #foreach($col in $Table.Columns)${col.Name}#if(${velocityCount}!=$Table.Columns.Count()),#end#end FROM ${Table.Name} WHERE "+condition;
			return base.SelectBySql(sql);
		}
		protected bool DeleteByCondition(string condition)
		{
			string sql = "DELETE FROM ${Table.Name.ToUpper()} WHERE "+condition;
			return base.DeleteBySql(sql);
		}
		
#if($Table.PrimaryKey.Columns.Count>0)
		public bool Delete(#foreach($col in $Table.Primarykey.Columns)${col.primativetypename} ${col.Name.ToLower()}#if(${velocityCount}!=$Table.PrimaryKey.Columns.Count()), #end#end)
		{
			string condition = "#foreach($col in $Table.Primarykey.Columns) ${col.Name.ToUpper()}=:${col.Name.ToUpper()}#if(${velocityCount}!=$Table.Primarykey.Columns.Count()) AND #end#end";
#foreach($col in $Table.Primarykey.Columns)
			AddParameter(_${col.Name.ToUpper()},${col.Name.ToLower()});
#end
			return DeleteByCondition(condition);
		}
		public bool Delete()
		{
			string condition = "#foreach($col in $Table.Primarykey.Columns) ${col.Name.ToUpper()}=:${col.Name.ToUpper()}#if(${velocityCount}!=$Table.Primarykey.Columns.Count()) AND #end#end";
#foreach($col in $Table.Primarykey.Columns)
			AddParameter(_${col.Name.ToUpper()},DataRow[_${col.Name.ToUpper()}]);
#end
			return DeleteByCondition(condition);
		}
				
		public bool Insert(#foreach($mycol in $Table.Columns)#if($mycol.Comment.IndexOf("AUTOINCREASE")>-1)out ${mycol.primativetypename} $mycol.Name.ToLower()#end#end)
		{		
#if($Table.Primarykey.Columns.Count()==1)
#foreach($col in $Table.Primarykey.Columns)
#if(!$Utils.isForeignKey($col,$Table.ForiegnKeys))
			int id = this.$Utils.ToPascalCase($col.Name) = GetSequence("SELECT SEQ_${Table.Name}.nextval FROM DUAL");
#foreach($mycol in $Table.Columns)
#if($mycol.Comment.IndexOf("AUTOINCREASE")>-1)
			$mycol.Name.ToLower() = this.$Utils.ToPascalCase($mycol.Name) = string.Concat(DateTime.Now.ToString("yyyyMMdd"),id.ToString().PadLeft(10,'0'));
#end
#end
#end
#end
#end
			string sql = @"INSERT INTO ${Table.Name}(#foreach($col in $Table.Columns)#if(${col.Name.ToUpper()}!="CREATETIME" && ${col.Name.ToUpper()}!="CREATE_TIME")#if(${velocityCount}!=1),#end${col.Name}#end#end)
			VALUES (#foreach($col in $Table.Columns)#if(${col.Name.ToUpper()}!="CREATETIME" && ${col.Name.ToUpper()}!="CREATE_TIME")#if(${velocityCount}!=1),#end:${col.Name}#end#end)";
#foreach($col in $Table.Columns)
#if(${col.Name.ToUpper()}!="CREATETIME" && ${col.Name.ToUpper()}!="CREATE_TIME")
#if(${col.DbType.ToUpper()}=="BLOB" || ${col.DbType.ToUpper()}=="CLOB" || ${col.DbType.ToUpper()}=="NCLOB" || ${col.DbType.ToUpper()}=="LONG")
			var oraPara_$Utils.ToPascalCase(${col.Name}) = new System.Data.OracleClient.OracleParameter(_${col.Name.ToUpper()}, System.Data.OracleClient.OracleType.$Utils.ToPascalCase(${col.DbType}));
            oraPara_$Utils.ToPascalCase(${col.Name})${oraValue} = DataRow[_${col.Name.ToUpper()}];
			AddParameter(oraPara_$Utils.ToPascalCase(${col.Name}));
#else
			AddParameter(_${col.Name.ToUpper()},DataRow[_${col.Name.ToUpper()}]);
#end
#end
#end
			return InsertBySql(sql);
		}
		
		public bool Update()
		{
			return UpdateByCondition(string.Empty);
		}
		public bool Update(Dictionary<${classname}Collection.Field,object> alterDic,Dictionary<${classname}Collection.Field,object> conditionDic)
		{
			if (alterDic.Count <= 0)
                return false;
            if (conditionDic.Count <= 0)
                return false;
            StringBuilder sql = new StringBuilder();
            sql.Append("update ").Append(_TableName).Append(" set ");
            foreach (${classname}Collection.Field key in alterDic.Keys)
            {
                object value = alterDic[key];
                string name = key.ToString();
                sql.Append(name).Append("=:").Append(name).Append(",");
                AddParameter(name, value);
            }
            sql.Remove(sql.Length - 1, 1);//移除最后一个逗号
            sql.Append(" where ");
            foreach (${classname}Collection.Field key in conditionDic.Keys)
            {
                object value = conditionDic[key];
                string name = key.ToString();
				if (alterDic.Keys.Contains(key))
                {
                    name = string.Concat("condition_", key);
                }
                sql.Append(key).Append("=:").Append(name).Append(" and ");
                AddParameter(name, value);
            }
            int len = " and ".Length;
            sql.Remove(sql.Length - len, len);//移除最后一个and
            return UpdateBySql(sql.ToString());
		}
		protected bool UpdateByCondition(string condition)
		{
#foreach($col in $Table.PrimaryKey.Columns)
			ChangePropertys.Remove(_${col.Name});
#end
			if (ChangePropertys.Count == 0)
            {
                return true;
            }
            
            StringBuilder sql = new StringBuilder();
            sql.AppendLine("UPDATE ${Table.Name.ToUpper()} SET");
			while (ChangePropertys.MoveNext())
            {
         		sql.AppendFormat(" {0}{1}=:{1} ", (ChangePropertys.CurrentIndex == 0 ? string.Empty : ","), ChangePropertys.Current);
                AddParameter(ChangePropertys.Current, DataRow[ChangePropertys.Current]);
            }
			sql.Append(" WHERE #foreach($col in $Table.PrimaryKey.Columns)${col.Name}=:${col.Name}#if(${velocityCount}!=$Table.Primarykey.Columns.Count()),#end#end");
#foreach($col in $Table.PrimaryKey.Columns)
			AddParameter(_${col.Name}, DataRow[_${col.Name}]);			
#end
			if (!string.IsNullOrEmpty(condition))
            {
				sql.AppendLine(" AND " + condition);
			}
			bool result = base.UpdateBySql(sql.ToString());
            ChangePropertys.Clear();
            return result;
		}	
#if($Table.UniqueKeys.Count>0)
#foreach($uk in $Table.UniqueKeys)
		public bool SelectBy#foreach($kcol in $uk.Columns)$Utils.ToPascalCase($kcol.Name)#if(${velocityCount}!=$uk.Columns.Count())_#end#end(#foreach($col in $uk.Columns)${col.primativetypename} ${col.Name.ToLower()}#if(${velocityCount}!=$uk.Columns.Count()),#end#end)
		{
			string condition = " #foreach($col in $uk.Columns)${col.Name.ToUpper()}=:${col.Name.ToUpper()}#if(${velocityCount}!=$uk.Columns.Count()) AND #end#end";
#foreach($col in $uk.Columns)
			AddParameter(_${col.Name.ToUpper()},${col.Name.ToLower()});
#end
			return SelectByCondition(condition);
		}
#end		
#end
		public bool SelectByPk(#foreach($col in $Table.Primarykey.Columns)${col.primativetypename} ${col.Name.ToLower()}#if(${velocityCount}!=$Table.Primarykey.Columns.Count()),#end#end)
		{
			string condition = " #foreach($col in $Table.Primarykey.Columns)${col.Name.ToUpper()}=:${col.Name.ToUpper()}#if(${velocityCount}!=$Table.Primarykey.Columns.Count()) AND #end#end";
#foreach($col in $Table.Primarykey.Columns)
			AddParameter(_${col.Name.ToUpper()},${col.Name.ToLower()});
#end
			return SelectByCondition(condition);
		}
#end		
		#endregion
	}
	
	public partial class ${classname}Collection : DataAccessCollectionBase
	{
		#region 构造和基本
		public ${classname}Collection():base()
		{			
		}
		
		protected override DataTable BuildTable()
		{
			return new ${classname}().CloneSchemaOfTable();
		}
		protected override DataAccessBase GetItemByIndex(int index)
        {
            return new ${classname}(DataTable.Rows[index]);
        }
		protected override string TableName
		{
			get{return $Utils.ToPascalCase($Table.Name)._TableName;}
		}
		public ${classname} this[int index]
        {
            get { return new ${classname}(DataTable.Rows[index]); }
        }
		public enum Field
        {
#set($index=-1)		
#foreach($col in $Table.Columns)
#set($index = $index+1)
			$Utils.ToPascalCase($col.name)=${index},
#end
		}
		#endregion
		#region 基本方法
		protected bool ListByCondition(string condition)
		{
			string sql = "SELECT #foreach($col in $Table.Columns)${col.name.ToUpper()}#if(${velocityCount}!=$Table.Columns.Count()),#end#end FROM ${Table.Name} WHERE "+condition;
			return ListBySql(sql);
		}

#if($Table.ForiegnKeys.Count()>0)
#foreach($fk in $Table.ForiegnKeys)
		public bool ListBy#foreach($col in $fk.Columns)$Utils.ToPascalCase($col.Name)#end(#foreach($col in $fk.Columns)${col.primativetypename} ${col.name.ToLower()}#end)
		{
			string condition = "#foreach($col in $fk.Columns)${col.name}=:${col.name}#end ORDER BY #foreach($pk in $Table.PrimaryKey.Columns)${pk.Name}#if(${velocityCount}!=$Table.PrimaryKey.Columns.Count()),#end#end DESC";
#foreach($col in $fk.Columns)
			AddParameter(${classname}._${col.name.ToUpper()},${col.name.ToLower()});
#end			
			return ListByCondition(condition);		
		}
#end		
#end
		public bool ListAll()
		{
			string condition = " 1=1";
			return ListByCondition(condition);
		}
		#region Linq
		public ${classname} Find(Predicate<${classname}> match)
        {
            foreach (${classname} item in this)
            {
                if (match(item))
                    return item;
            }
            return null;
        }
        public ${classname}Collection FindAll(Predicate<${classname}> match)
        {
            ${classname}Collection list = new ${classname}Collection();
            foreach (${classname} item in this)
            {
                if (match(item))
                    list.Add(item);
            }
            return list;
        }
        public bool Contains(Predicate<${classname}> match)
        {
            foreach ($Utils.ToPascalCase($Table.Name) item in this)
            {
                if (match(item))
                    return true;
            }
            return false;
        }
#if($Table.PrimaryKey.Columns.Count>0)
		public bool DeleteAt(Predicate<${classname}> match)
        {
            BeginTransaction();
            foreach (${classname} item in this)
            {
                item.ReferenceTransactionFrom(Transaction);
                if (!match(item))
                    continue;
                if (!item.Delete())
                {
                    Rollback();
                    return false;
                }
            }
            Commit();
            return true;
        }
#end
		#endregion
		#endregion		
	}
}